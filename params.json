{
  "name": "Html-sync",
  "tagline": "",
  "body": "Getting Started\r\n===============\r\nSetting everything up\r\n----------------------\r\n\r\nFirst install the library and save it to your package.json. After that install socket.io if you didn't already.\r\n```\r\nnpm install html-sync --save\r\n\r\nnpm install socket.io --save\r\n```\r\n\r\nIn your main file add the following code to initialize the library\r\n```js\r\nvar express = require('express');\r\nvar HTMLSync = require('html-sync');\r\n\r\n// Set up the server\r\nvar app = express();\r\nvar http = require('http').createServer(app);\r\nhttp.listen(process.env.PORT || 3000, function(){\r\n    console.log(\"listening on \" + (process.env.PORT || 3000));\r\n});\r\n\r\n// Start Socket.IO Server with instance of webserver\r\nvar io = require('socket.io')(http);\r\n\r\n// Start HTML-Sync with instance of Socket.IO server\r\nvar hs = new HTMLSync(io, {debug:true});\r\n```\r\n\r\nThat's it on the server side. Now we need to connect a client to the server and we are good to go.\r\nThe following is a very basic HTML-Page that connects to the server.\r\n```html\r\n    <html>\r\n        <head>\r\n            <script src=\"https://code.jquery.com/jquery-3.1.0.min.js\"></script>\r\n            <script src=\"html-sync.min.js\"></script>\r\n        </head>\r\n        <body>\r\n            <h1>Hello World</h1>\r\n            <div id=\"wrapper\"></div>\r\n        </body>\r\n        <script>\r\n            var htmlSync = new HTMLSync({\r\n                debug:true,\r\n                url: \"ws://127.0.0.1:3000\",\r\n                room: \"/\"\r\n            });\r\n        </script>\r\n    </html>\r\n```\r\n**NOTE:** Once you serve this code from your Express Server instead of the filesystem the url parameter is no longer neeeded.\r\n\r\nIf everything worked out you should be able to start the server\r\n```\r\n$ node app.js\r\nlistening on 3000\r\n```\r\n\r\nOnce you open the HTML-file in a browser the server should print the following on the console.\r\n```\r\na user connected\r\njoin { room: '/' }\r\n```\r\n\r\nCreating an object\r\n------------------\r\nNow that the connection is established we can start adding objects to be synched between multiple clients. You can add object either on the server or client side depending on your needs.\r\nLet's start by creating a simple user counter to our website. In your main server file add the following code\r\n```js\r\n// Actual user count as integer\r\nvar userCount = 0;\r\n\r\n// The counter object that will be synced. In this case it's a <h2>-tag\r\nvar counter = new HTMLSync.Part(\"h2\");\r\n\r\n// Setting up the default attributes of the element\r\ncounter.attr({\r\n    innerHTML: userCount,\r\n    className: \"user-counter\"\r\n});\r\n\r\n// This tells HTML-Sync where to add the object on the website\r\ncounter.parent = \"wrapper\";\r\n\r\n// Finally add the object to all clients\r\nHTMLSync.add(counter);\r\n```\r\n\r\nIf you restart the server and refresh the website you should see a \"0\" under the \"Hello World\". To get the actual user count we need to add a bit more code to our server.\r\n```js\r\nio.on(\"connection\", function(socket){\r\n    userCount += 1;\r\n    console.log(\"A user connected. User count:\", userCount);\r\n    counter.update({\r\n        attr:{\r\n            innerHTML: userCount.toString()\r\n        }\r\n    });\r\n\r\n    socket.on(\"disconnect\", function(){\r\n        userCount -= 1;\r\n        console.log(\"A user disconnected. User count:\", userCount);\r\n        counter.update({\r\n            attr:{\r\n                innerHTML: userCount.toString()\r\n            }\r\n        });\r\n    });\r\n});\r\n```\r\n\r\nWith this code we added an event handler for the usual Socket.IO connect- and disconnet-event. We adjust the userCounter variable and update the counter part object. If you open the test.html file multiple times every tab should always display the correct amount of connected clients.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}