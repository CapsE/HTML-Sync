@startuml

Namespace Server{

    class Part{
        void addChild(Part p)
        void css(string, string)
        void css(JSON)
        void attr(string, string)
        void attr(JSON)

        void addInclude(string)

        string type
        Part[] content
        JSON style
        JSON attributes

        <static> string[] includes
        Part parent
    }





    class Room{
        void add(Part)
        JSON updates
        JSON data
        string roomId
    }

    HTMLSync "1" <-- "*" Room : manages
    HTMLSync "1" <-- "*" Part : stores
}

class Syncable{
    void update(JSON, bool)
    JSON toJSON()
    void setId(string)
    [any] call(string, any)
    void kill()

    string id
    string name
    <static> number counter
    JSON data
    {string:function} functions
}
Client.Part <|-- Syncable
Server.Part <|-- Syncable

Namespace NodeJS{
    class EventEmitter{
        Event: 'newListener'
        Event: 'removeListener'
        EventEmitter.listenerCount(emitter, eventName)
        EventEmitter.defaultMaxListeners
        emitter.addListener(eventName, listener)
        emitter.emit(eventName[, arg1][, arg2][, ...])
        emitter.eventNames()
        emitter.getMaxListeners()
        emitter.listenerCount(eventName)
        emitter.listeners(eventName)
        emitter.on(eventName, listener)
        emitter.once(eventName, listener)
        emitter.prependListener(eventName, listener)
        emitter.prependOnceListener(eventName, listener)
        emitter.removeAllListeners([eventName])
        emitter.removeListener(eventName, listener)
        emitter.setMaxListeners(n)
    }
}

Server.HTMLSync <|-- NodeJS.EventEmitter
Client.HTMLSync <|-- NodeJS.EventEmitter
Server.Room <|-- NodeJS.EventEmitter

Namespace Client{

    class Part{
        void addChild(Part p)
        void css(string, string)
        void css(JSON)
        void attr(string, string)
        void attr(JSON)

        HTML-Node html()
        void renderHTML(HTML-Node)

        void addInclude(string)

        string id
        string name
        <static> number counter
        string type
        Part[] content
        JSON style
        JSON attributes
        JSON data
        <static> string[] includes
        Part parent
    }

    class HTMLSync{
        <static> void update(JSON)
        void update(JSON)
        <static> void add(Part)
        void add(Part)
        <static> deleteObj(string)
        deleteObj(string)

        <static> HTMLSync instance
        <static> string room
        <static> JSON params
        <static> {string: Part} parts
        <static> Socket socket
    }

    HTMLSync <-- Part
}



@enduml